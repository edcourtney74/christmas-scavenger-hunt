{"version":3,"sources":["components/Container.js","components/MainStart.js","components/PlayerStart.js","components/Trivia.js","components/Princesses.js","components/NBA.js","components/NumberGuess.js","components/Rock.js","components/SecretCode.js","components/Final.js","functions/trivia.js","functions/shuffle.js","functions/match.js","functions/nba.js","functions/numberGuess.js","functions/rock.js","App.js","serviceWorker.js","index.js"],"names":["MainContainer","children","Container","Row","Col","className","MainStart","props","Button","onClick","onClickMain","size","id","PlayerStart","player","message","Trivia","guess","json","question","answers","map","answer","index","key","onClickTrivia","block","data-rank","Match","princesses","princess","group","disabled","src","name","alt","data-card","data-group","cards","rank","NBA","lg","card","onClickSubmit","onClickClear","selected","NumberGuess","Form","Input","placeholder","onChange","guesses","length","Rock","wins","user","subInstructions","data-choice","losses","mpj","SecretCode","clue","images","image","inline","FormGroup","onClickCode","Final","audioFinal","document","getElementsByClassName","setTimeout","undefined","play","playFinal","triviaCheck","triviaIdx","correctCount","triviaJson","correct","triviaJsonIndex","triviaCorrectCount","guessReceived","guessResponse","matchCheck","first","second","stageCount","jsonCount","groupId","initial","firstGuess","instructions","matchCorrectCount","delayed","timeout","card0","card1","card2","card3","card4","card5","card6","card7","nbaAnswer","nbaSubmit","nbaCorrect","forEach","compareNba","btnDisabled","numberGuess","userGuess","random","history","randomNumber","Math","floor","compareRock","userPick","result","compPick","rockNumber","getComputerPick","compRock","userWins","userLosses","App","state","codeJsonCount","shuffled","group0","group1","group2","group3","nbaSelected","numberHistory","userRock","codeJsonIndex","letter","number","codeMessage","stageOrder","handleMainClick","event","preventDefault","setState","handleMessageClick","playerToggle","handleTriviaClick","parseInt","target","dataset","triviaResult","playCorrect","playWrong","handlePrincessesClick","cardGuess","cardId","playPick","handleNbaClick","cardID","push","handleNbaSubmit","handleNbaClear","handleNumberGuessClick","handleRockClick","choice","handleInputChange","value","toUpperCase","handleCodeClick","codeJson","code","this","items","i","j","shuffle","audioPick","console","log","stage","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b02e7ae5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Row, Col, Container } from \"reactstrap\";\r\n\r\nconst MainContainer = ({ children }) => {\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <Col>\r\n          <div className=\"game-area m-5 p-3\">{children}</div>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default MainContainer;\r\n","import React from \"react\";\r\nimport { Button } from \"reactstrap\";\r\n\r\nconst MainStart = props => {\r\n  return (\r\n    <div className=\"text-center\">\r\n      <h1>Welcome to Christmas Scavenger Hunt!</h1>\r\n      <p className=\"lead mt-3\">\r\n        You'll use your secret decoder ring to find the hidden clues and move on\r\n        to your next mission.\r\n      </p>\r\n      <p className=\"lead\">Click the candy cane to start.</p> <br />\r\n      <Button\r\n        onClick={props.onClickMain}\r\n        size=\"lg\"\r\n        className=\"mt-n4\"\r\n        id=\"main-btn\"\r\n      >\r\n        <i className=\"fas fa-candy-cane\"></i>\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainStart;\r\n","import React from \"react\";\r\nimport { Button } from \"reactstrap\";\r\n\r\nconst PlayerStart = props => {\r\n  return (\r\n    <div className=\"text-center\">\r\n      <h1>{props.player}</h1>\r\n      <p className=\"lead\">{props.message}</p>\r\n      <Button onClick={props.onClick} size=\"lg\" id=\"ans-submit\">\r\n        I'm Ready!\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlayerStart;\r\n","import React from \"react\";\r\nimport { Button } from \"reactstrap\";\r\n\r\n// Display trivia question or display response\r\nconst Trivia = props => {\r\n  if (!props.guess) {\r\n    return (\r\n      <div>\r\n        <h3>{props.json.question}</h3>\r\n        {props.json.answers.map((answer, index) => (\r\n          <Button\r\n            key={index}\r\n            onClick={props.onClickTrivia}\r\n            size=\"lg\"\r\n            className=\"my-3 text-left\"\r\n            block\r\n            id=\"ans-submit\"\r\n            data-rank={index}\r\n          >\r\n            {answer}\r\n          </Button>\r\n        ))}\r\n      </div>\r\n    );\r\n  } else {\r\n    return <h1 className=\"text-center\">{props.message}</h1>;\r\n  }\r\n};\r\n\r\nexport default Trivia;\r\n","import React from \"react\";\r\nimport { Row, Button } from \"reactstrap\";\r\n\r\nconst Match = props => {\r\n  return (\r\n    <div>\r\n      <Row className=\"justify-content-center\">\r\n        <h1>{props.message}</h1>\r\n      </Row>\r\n      <Row className=\"justify-content-center mt-2\">\r\n        {props.princesses.map(princess => (\r\n          <Button\r\n            onClick={props.onClick}\r\n            key={princess.id}\r\n            className={`${\r\n              props[`group${princess.group}`]\r\n                ? \"matched p-1 mr-1 mb-1 p-button\"\r\n                : \"p-1 mr-1 mb-1 p-button\"\r\n            }`}\r\n            id=\"btn-brd\"\r\n            disabled={props[`card${princess.id}`]}\r\n          >\r\n            <img\r\n              src={`${\r\n                props[`card${princess.id}`]\r\n                  ? `../../images/princesses/${princess.name}`\r\n                  : \"../../images/princesses/cardcover.png\"\r\n              }`}\r\n              className=\"princess\"\r\n              alt=\"\"\r\n              data-card={princess.id}\r\n              data-group={princess.group}\r\n            />\r\n          </Button>\r\n        ))}\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Match;\r\n","import React from \"react\";\r\nimport { Row, Col, Button } from \"reactstrap\";\r\n\r\nconst cards = [\r\n  { name: \"kobe\", rank: 2 },\r\n  { name: \"wade\", rank: 4 },\r\n  { name: \"jordan\", rank: 0 },\r\n  { name: \"barkley\", rank: 3 },\r\n  { name: \"lebron\", rank: 1 }\r\n];\r\n\r\nconst NBA = props => {\r\n  return (\r\n    <div>\r\n      <Row className=\"justify-content-center\">\r\n        <h1>{props.message}</h1>\r\n      </Row>\r\n      <Row className=\"mt-2\">\r\n        <Col lg=\"9\">\r\n          {cards.map(card => (\r\n            <Button\r\n              key={card.rank}\r\n              onClick={props.onClick}\r\n              className={`${\r\n                props[`card${card.rank}`]\r\n                  ? \"matched p-1 mr-1 mb-1 p-button nba\"\r\n                  : \"p-1 mr-1 mb-1 p-button nba\"\r\n              }`}\r\n              id=\"btn-brd\"\r\n            >\r\n              <img\r\n                src={`../../images/nba/${card.name}.jpg`}\r\n                data-rank={card.rank}\r\n                alt={card.name}\r\n              />\r\n            </Button>\r\n          ))}\r\n        </Col>\r\n        <Col lg=\"3\">\r\n          <Row className=\"mb-2\">\r\n            <Button\r\n              className=\"mr-1\"\r\n              id=\"ans-submit\"\r\n              disabled={props.disabled}\r\n              onClick={props.onClickSubmit}\r\n            >\r\n              Am I Right?\r\n            </Button>\r\n            <Button id=\"ans-submit\" onClick={props.onClickClear}>\r\n              Start Over\r\n            </Button>\r\n          </Row>\r\n          <Row>\r\n            {props.selected.map(player => (\r\n              <img\r\n                key={player}\r\n                src={`../../images/nba/${player}.jpg`}\r\n                className=\"mini-nba mr-1\"\r\n                alt={player}\r\n              />\r\n            ))}\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NBA;\r\n","import React from \"react\";\r\nimport { Row, Col, Form, Input, Button } from \"reactstrap\";\r\n\r\nconst NumberGuess = props => {\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col lg={{ size: 9 }}>\r\n          <h1 className=\"text-center\">{props.message}</h1>\r\n          <Form>\r\n            <Row className=\"justify-content-center\">\r\n              <Input\r\n                name=\"number\"\r\n                id=\"number\"\r\n                placeholder=\"\"\r\n                className=\"mb-2\"\r\n                onChange={props.onChange}\r\n              />\r\n            </Row>\r\n            <Row className=\"justify-content-center\">\r\n              <Button id=\"ans-submit\" onClick={props.onClick}>\r\n                Here's my guess!\r\n              </Button>\r\n            </Row>\r\n          </Form>\r\n        </Col>\r\n        <Col lg=\"3\">\r\n          <Row className=\"mb-2\">\r\n            <h3>\r\n              <u>Your guesses</u>\r\n            </h3>\r\n            <ul>\r\n              {props.guesses.length > 0 &&\r\n                props.guesses.map((guess, index) => (\r\n                  <li key={index}>{guess}</li>\r\n                ))}\r\n            </ul>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NumberGuess;\r\n","import React from \"react\";\r\nimport { Row, Col, Form, Button } from \"reactstrap\";\r\n\r\nconst Rock = props => {\r\n  return (\r\n    <div>\r\n      <Row className=\"mt-2\">\r\n        <Col lg=\"2\">\r\n          <img\r\n            src={`../../images/nba/ethan.jpg`}\r\n            className=\"players\"\r\n            alt=\"Ethan\"\r\n          />\r\n          <h5 className=\"score text-center\">{props.wins}</h5>\r\n          <p className=\"rock-choice text-center\">{props.user}</p>\r\n        </Col>\r\n        <Col lg={{ size: 8 }}>\r\n          <div id=\"rock-msg\">\r\n            <h1 className=\"text-center\">{props.message}</h1>\r\n            <h4 className=\"text-center\">{props.subInstructions}</h4>\r\n          </div>\r\n          <Row className=\"justify-content-center mt-3\">\r\n            <Form>\r\n              <Button\r\n                id=\"ans-rock\"\r\n                data-choice=\"Rock\"\r\n                className=\"mr-3\"\r\n                onClick={props.onClick}\r\n              >\r\n                Rock\r\n              </Button>\r\n              <Button\r\n                id=\"ans-rock\"\r\n                data-choice=\"Paper\"\r\n                className=\"mr-3\"\r\n                onClick={props.onClick}\r\n              >\r\n                Paper\r\n              </Button>\r\n              <Button\r\n                id=\"ans-rock\"\r\n                data-choice=\"Scissors\"\r\n                className=\"mr-1\"\r\n                onClick={props.onClick}\r\n              >\r\n                Scissors\r\n              </Button>\r\n            </Form>\r\n          </Row>\r\n        </Col>\r\n        <Col lg=\"2\">\r\n          <img\r\n            src={`../../images/nba/mpj.png`}\r\n            className=\"players pr-2\"\r\n            alt=\"MPJ\"\r\n          />\r\n          <h5 className=\"score text-center\">{props.losses}</h5>\r\n          <p className=\"rock-choice text-center\">{props.mpj}</p>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Rock;\r\n","import React from \"react\";\r\nimport { Row, Form, FormGroup, Input, Button } from \"reactstrap\";\r\n\r\n// Display code or display response\r\nconst SecretCode = props => {\r\n  if (!props.guess) {\r\n    return (\r\n      <div>\r\n        <h1>{props.json.clue}</h1>\r\n        <Row className=\"justify-content-center mt-4\">\r\n          {props.json.images.map(image => (\r\n            <img\r\n              src={`../../images/code/${image}.png`}\r\n              className=\"code-img\"\r\n              alt={`${image}`}\r\n            />\r\n          ))}\r\n        </Row>\r\n        <Row className=\"justify-content-center mt-4\">\r\n          <Form inline>\r\n            <FormGroup>\r\n              <Input\r\n                name=\"letter\"\r\n                id=\"letter\"\r\n                placeholder=\"Co\"\r\n                onChange={props.onChange}\r\n                className=\"code-input\"\r\n              />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Input\r\n                name=\"number\"\r\n                id=\"number\"\r\n                placeholder=\"de\"\r\n                className=\"ml-4\"\r\n                onChange={props.onChange}\r\n              />\r\n            </FormGroup>\r\n          </Form>\r\n        </Row>\r\n        <Row className=\"justify-content-center mt-2\">\r\n          <Button onClick={props.onClickCode} id=\"code-submit\">\r\n            Here's my code!\r\n          </Button>\r\n        </Row>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <h1 className=\"text-center\">{props.message}</h1>;\r\n  }\r\n};\r\n\r\nexport default SecretCode;\r\n","import React from \"react\";\r\n\r\nconst playFinal = () => {\r\n  const audioFinal = document.getElementsByClassName(\"audio-final\")[0];\r\n  setTimeout(() => {\r\n    if (audioFinal !== undefined) audioFinal.play();\r\n  }, 2000);\r\n};\r\n\r\nconst Final = () => {\r\n  playFinal();\r\n  return (\r\n    <div className=\"text-center\">\r\n      <h1>Congrats, Lainey and Ethan!</h1>\r\n      <p className=\"lead mt-3\">You solved the Christmas scavenger hunt!</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Final;\r\n","import triviaJson from \"../trivia.json\";\r\n\r\nconst triviaCheck = (rank, triviaIdx, correctCount) => {\r\n  if (rank === triviaJson[triviaIdx].correct) {\r\n    return {\r\n      triviaJsonIndex: triviaIdx + 1,\r\n      triviaCorrectCount: correctCount + 1,\r\n      guessReceived: true,\r\n      guessResponse: \"You got it!\"\r\n    };\r\n  } else {\r\n    return {\r\n      guessReceived: true,\r\n      guessResponse: \"Sorry, that's not right.\"\r\n    };\r\n  }\r\n};\r\nexport default triviaCheck;\r\n","export const princesses = [\r\n  { name: \"cinderella.png\", id: 0, group: 0 },\r\n  { name: \"ariel.jpg\", id: 1, group: 1 },\r\n  { name: \"elena.jpg\", id: 2, group: 2 },\r\n  { name: \"elsa.jpg\", id: 3, group: 3 },\r\n  { name: \"cinderella.png\", id: 4, group: 0 },\r\n  { name: \"ariel.jpg\", id: 5, group: 1 },\r\n  { name: \"elena.jpg\", id: 6, group: 2 },\r\n  { name: \"elsa.jpg\", id: 7, group: 3 }\r\n];\r\n\r\nexport const shuffle = items => {\r\n  for (let i = items.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [items[i], items[j]] = [items[j], items[i]];\r\n  }\r\n  return items;\r\n};\r\n","const matchCheck = (\r\n  first,\r\n  second,\r\n  correctCount,\r\n  stageCount,\r\n  jsonCount,\r\n  group\r\n) => {\r\n  if ((first === second + 4 || first === second - 4) && correctCount < 3) {\r\n    const groupId = `group${group}`;\r\n    return {\r\n      initial: {\r\n        firstGuess: \"\",\r\n        instructions: \"You found it!\",\r\n        matchCorrectCount: correctCount + 1\r\n      },\r\n      delayed: {\r\n        [groupId]: true,\r\n        guessReceived: false,\r\n        instructions: \"Pick a card\"\r\n      },\r\n      timeout: 1500\r\n    };\r\n  } else if (first === second + 4 || first === second - 4) {\r\n    // The second guess was a match and all cards have been found...\r\n    const groupId = `group${group}`;\r\n    return {\r\n      initial: {\r\n        firstGuess: \"\",\r\n        instructions: \"You found them all!\"\r\n      },\r\n      delayed: {\r\n        [groupId]: true,\r\n        guessReceived: false,\r\n        stageCount: stageCount + 1,\r\n        codeJsonCount: jsonCount + 1,\r\n        card0: false,\r\n        card1: false,\r\n        card2: false,\r\n        card3: false,\r\n        card4: false,\r\n        card5: false,\r\n        card6: false,\r\n        card7: false,\r\n        instructions: \"Click the cards in order of most expensive.\"\r\n      },\r\n      timeout: 3000\r\n    };\r\n  } else {\r\n    // Second guess is not a match\r\n    return {\r\n      initial: {\r\n        firstGuess: \"\",\r\n        guessReceived: false,\r\n        instructions: \"Try again\"\r\n      },\r\n      delayed: {\r\n        instructions: \"Pick a card\",\r\n        card0: false,\r\n        card1: false,\r\n        card2: false,\r\n        card3: false,\r\n        card4: false,\r\n        card5: false,\r\n        card6: false,\r\n        card7: false\r\n      },\r\n      timeout: 1000\r\n    };\r\n  }\r\n};\r\nexport default matchCheck;\r\n","const nbaAnswer = [\"jordan\", \"lebron\", \"kobe\", \"barkley\", \"wade\"];\r\n\r\nconst compareNba = selected => {\r\n  let correct = 0;\r\n  selected.forEach((player, index) => {\r\n    if (player === nbaAnswer[index]) {\r\n      correct++;\r\n    }\r\n  });\r\n  return correct;\r\n};\r\n\r\nconst nbaSubmit = (selected, stageCount) => {\r\n  const nbaCorrect = compareNba(selected);\r\n  if (nbaCorrect === 5) {\r\n    return {\r\n      initial: {\r\n        instructions: \"You got it!\"\r\n      },\r\n      delayed: {\r\n        stageCount: stageCount + 1,\r\n        instructions: \"Pick a number between 1 and 10.\"\r\n      },\r\n      timeout: 3000\r\n    };\r\n  } else {\r\n    return {\r\n      initial: {\r\n        instructions: `You got ${nbaCorrect} correct. Try again!`,\r\n        btnDisabled: true\r\n      },\r\n      delayed: {\r\n        instructions: \"Click the cards in order of most expensive.\",\r\n        card0: false,\r\n        card1: false,\r\n        card2: false,\r\n        card3: false,\r\n        card4: false\r\n      },\r\n      timeout: 3000\r\n    };\r\n  }\r\n};\r\nexport default nbaSubmit;\r\n","const numberGuess = (userGuess, random, guesses, stageCount) => {\r\n  // If the guess is correct\r\n  if (userGuess === random) {\r\n    return {\r\n      history: \"\",\r\n      initial: {\r\n        instructions: \"You got it!\"\r\n      },\r\n      delayed: {\r\n        stageCount: stageCount + 1,\r\n        instructions: \"Make your pick\"\r\n      },\r\n      timeout: 3000\r\n    };\r\n  } else {\r\n    // If guess is incorrect, make sure it's not the fourth guess\r\n    if (guesses < 3) {\r\n      if (userGuess < random) {\r\n        return {\r\n          history: `Higher than ${userGuess}`,\r\n          initial: {\r\n            instructions: \"Higher!\"\r\n          }\r\n        };\r\n      } else {\r\n        return {\r\n          history: `Lower than ${userGuess}`,\r\n          initial: {\r\n            instructions: \"Lower!\"\r\n          }\r\n        };\r\n      }\r\n    } else {\r\n      const randomNumber = Math.floor(Math.random() * 10) + 1;\r\n      return {\r\n        history: \"\",\r\n        initial: {\r\n          instructions: \"Sorry, try again.\"\r\n        },\r\n        delayed: {\r\n          instructions: \"Pick a number\",\r\n          randomNumber\r\n        },\r\n        timeout: 1500\r\n      };\r\n    }\r\n  }\r\n};\r\nexport default numberGuess;\r\n","const getComputerPick = () => {\r\n  const rockNumber = Math.floor(Math.random() * 3);\r\n  if (rockNumber === 0) {\r\n    return \"Rock\";\r\n  } else if (rockNumber === 1) {\r\n    return \"Paper\";\r\n  } else {\r\n    return \"Scissors\";\r\n  }\r\n};\r\n\r\nconst compareRock = (userPick, wins, losses) => {\r\n  const compPick = getComputerPick();\r\n  let result;\r\n  let stateObj;\r\n  if (userPick === compPick) {\r\n    result = \"tie\";\r\n  } else if (userPick === \"Rock\") {\r\n    result = compPick === \"Paper\" ? \"loss\" : \"win\";\r\n  } else if (userPick === \"Paper\") {\r\n    result = compPick === \"Rock\" ? \"win\" : \"loss\";\r\n  } else if (userPick === \"Scissors\") {\r\n    result = compPick === \"Rock\" ? \"loss\" : \"win\";\r\n  }\r\n  if (result === \"tie\") {\r\n    stateObj = {\r\n      instructions: `You both picked ${userPick}.`,\r\n      compRock: compPick,\r\n      result\r\n    };\r\n  } else if (result === \"win\") {\r\n    stateObj = {\r\n      result,\r\n      compRock: compPick,\r\n      instructions: `You won!`,\r\n      userWins: wins + 1\r\n    };\r\n  } else {\r\n    stateObj = {\r\n      result,\r\n      compRock: compPick,\r\n      instructions: `You lost!`,\r\n      userLosses: losses + 1\r\n    };\r\n  }\r\n  return stateObj;\r\n};\r\nexport default compareRock;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Container from \"./components/Container\";\nimport MainStart from \"./components/MainStart\";\nimport PlayerStart from \"./components/PlayerStart\";\nimport Trivia from \"./components/Trivia\";\nimport Match from \"./components/Princesses\";\nimport NBA from \"./components/NBA\";\nimport NumberGuess from \"./components/NumberGuess\";\nimport Rock from \"./components/Rock\";\nimport SecretCode from \"./components/SecretCode\";\nimport Final from \"./components/Final\";\n\nimport triviaCheck from \"./functions/trivia\";\nimport { princesses, shuffle } from \"./functions/shuffle\";\nimport matchCheck from \"./functions/match\";\nimport nbaSubmit from \"./functions/nba\";\nimport numberGuess from \"./functions/numberGuess\";\nimport compareRock from \"./functions/rock\";\n\nimport triviaJson from \"./trivia.json\";\nimport codeJson from \"./secretCode.json\";\n\nclass App extends React.Component {\n  state = {\n    player: \"Lainey\",\n    stageCount: 8,\n    codeJsonCount: 0,\n    guessReceived: false,\n    guessResponse: \"\",\n    btnDisabled: true,\n    instructions: \"Pick a card\",\n\n    // Trivia variables\n    triviaJsonIndex: 0,\n    triviaCorrectCount: 0,\n\n    // Match variables (cards, matchMessage also used for NBA)\n    shuffled: [],\n    firstGuess: \"\",\n    matchCorrectCount: 0,\n    card0: false,\n    card1: false,\n    card2: false,\n    card3: false,\n    card4: false,\n    card5: false,\n    card6: false,\n    card7: false,\n    group0: false,\n    group1: false,\n    group2: false,\n    group3: false,\n\n    // NBA variables\n    nbaSelected: [],\n\n    // Number guess variables\n    randomNumber: 0,\n    numberHistory: [],\n\n    // Rock variables\n    userWins: 0,\n    userLosses: 0,\n    userRock: \"\",\n    compRock: \"\",\n    subInstructions: \"\",\n\n    // Secret code variables\n    codeJsonIndex: 0,\n    letter: \"\",\n    number: \"\",\n    codeMessage: \"\"\n  };\n\n  stageOrder = [\n    \"MainStart\",\n    \"PlayerStart\",\n    \"Trivia\",\n    \"SecretCode\",\n    \"PlayerStart\",\n    \"Trivia\",\n    \"SecretCode\",\n    \"PlayerStart\",\n    \"Princesses\",\n    \"SecretCode\",\n    \"PlayerStart\",\n    \"NBA\",\n    \"SecretCode\",\n    \"PlayerStart\",\n    \"NumberGuess\",\n    \"SecretCode\",\n    \"PlayerStart\",\n    \"Rock\",\n    \"SecretCode\",\n    \"Final\"\n  ];\n\n  nbaSelected = [];\n\n  numberHistory = [];\n\n  playerToggle() {\n    if (this.state.player === \"Lainey\") {\n      this.setState({ player: \"Ethan\" });\n    } else {\n      this.setState({ player: \"Lainey\" });\n    }\n  }\n\n  handleMainClick = event => {\n    event.preventDefault();\n    this.setState({\n      stageCount: this.state.stageCount + 1\n    });\n  };\n\n  handleMessageClick = event => {\n    event.preventDefault();\n    this.playerToggle();\n    this.setState({\n      stageCount: this.state.stageCount + 1\n    });\n  };\n\n  handleTriviaClick = event => {\n    event.preventDefault();\n    const rank = parseInt(event.target.dataset.rank);\n    const triviaResult = triviaCheck(\n      rank,\n      this.state.triviaJsonIndex,\n      this.state.triviaCorrectCount\n    );\n    triviaResult.guessResponse === \"You got it!\"\n      ? this.playCorrect()\n      : this.playWrong();\n    this.setState(triviaResult);\n\n    setTimeout(() => {\n      this.state.triviaCorrectCount === 3\n        ? this.setState({\n            guessReceived: false,\n            stageCount: this.state.stageCount + 1,\n            triviaCorrectCount: 0\n          })\n        : this.setState({\n            guessReceived: false\n          });\n    }, 3000);\n  };\n\n  handlePrincessesClick = event => {\n    event.preventDefault();\n    const cardGuess = parseInt(event.target.dataset.card);\n    const cardId = `card${cardGuess}`;\n    this.setState({ [cardId]: true });\n\n    // If a first guess was just made\n    if (!this.state.guessReceived) {\n      this.setState({\n        firstGuess: cardGuess,\n        guessReceived: true,\n        instructions: \"Find the matching princess\"\n      });\n      this.playPick();\n    } else {\n      const { initial, delayed, timeout } = matchCheck(\n        this.state.firstGuess,\n        cardGuess,\n        this.state.matchCorrectCount,\n        this.state.stageCount,\n        this.codeJsonCount,\n        event.target.dataset.group\n      );\n      initial.instructions === \"You found them all!\" ||\n      initial.instructions === \"You found it!\"\n        ? this.playCorrect()\n        : this.playWrong();\n      this.setState(initial);\n      setTimeout(() => {\n        this.setState(delayed);\n      }, timeout);\n    }\n  };\n\n  handleNbaClick = event => {\n    event.preventDefault();\n    this.playPick();\n    const cardID = `card${event.target.dataset.rank}`;\n    this.nbaSelected.push(event.target.alt);\n    if (this.nbaSelected.length === 5) {\n      this.setState({\n        nbaSelected: this.nbaSelected,\n        [cardID]: true,\n        btnDisabled: false\n      });\n    } else {\n      this.setState({\n        nbaSelected: this.nbaSelected,\n        [cardID]: true\n      });\n    }\n  };\n\n  handleNbaSubmit = event => {\n    event.preventDefault();\n    const { initial, delayed, timeout } = nbaSubmit(\n      this.nbaSelected,\n      this.state.stageCount\n    );\n    initial.instructions === \"You got it!\"\n      ? this.playCorrect()\n      : this.playWrong();\n    this.setState(initial);\n    this.nbaSelected = [];\n    setTimeout(() => {\n      this.setState(delayed);\n      this.setState({ nbaSelected: this.nbaSelected });\n    }, timeout);\n  };\n\n  handleNbaClear = event => {\n    event.preventDefault();\n    this.nbaSelected = [];\n    this.setState({\n      nbaSelected: this.nbaSelected,\n      card0: false,\n      card1: false,\n      card2: false,\n      card3: false,\n      card4: false\n    });\n  };\n\n  handleNumberGuessClick = event => {\n    event.preventDefault();\n    const userGuess = parseInt(this.state.number);\n    const { randomNumber } = this.state;\n    const { history, initial, delayed, timeout } = numberGuess(\n      userGuess,\n      randomNumber,\n      this.state.numberHistory.length,\n      this.state.stageCount\n    );\n\n    // If game is over, won or lost\n    if (history === \"\") {\n      this.numberHistory = [];\n      initial.numberHistory = this.numberHistory;\n      initial.instructions === \"You got it!\"\n        ? this.playCorrect()\n        : this.playWrong();\n      this.setState(initial);\n      setTimeout(() => {\n        this.setState(delayed);\n      }, timeout);\n    } else {\n      // If guesses remain\n      this.playWrong();\n      this.numberHistory.push(history);\n      initial.numberHistory = this.numberHistory;\n      this.setState(initial);\n    }\n  };\n\n  handleRockClick = event => {\n    event.preventDefault();\n    this.playPick();\n    const userPick = event.target.dataset.choice;\n    this.setState({\n      userRock: userPick,\n      compRock: \"\",\n      instructions: \"Waiting for MPJ...\"\n    });\n    const result = compareRock(\n      userPick,\n      this.state.userWins,\n      this.state.userLosses\n    );\n    setTimeout(() => {\n      if (result.result === \"win\") {\n        this.playCorrect();\n      } else if (result.result === \"loss\") {\n        this.playWrong();\n      } else {\n        this.playPick();\n      }\n\n      this.setState(result);\n      if (result.userWins === 3) {\n        this.setState({\n          subInstructions: \"You beat MPJ three times!\"\n        });\n        this.playCorrect();\n        setTimeout(() => {\n          this.setState({ stageCount: this.state.stageCount + 1 });\n        }, 3000);\n      } else if (result.userLosses === 3) {\n        this.setState({\n          subInstructions: \"MPJ beat you three times! Try again to beat him.\",\n          userWins: 0,\n          userLosses: 0\n        });\n      } else {\n        this.setState({\n          subInstructions: \"Pick again\"\n        });\n      }\n    }, 3000);\n  };\n\n  // Code input\n  handleInputChange = event => {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value.toUpperCase()\n    });\n  };\n\n  handleCodeClick = event => {\n    event.preventDefault();\n    if (\n      `${this.state.letter}${this.state.number}` ===\n      codeJson[this.state.codeJsonIndex].code\n    ) {\n      this.playCorrect();\n      this.setState({\n        guessReceived: true,\n        codeJsonIndex: this.state.codeJsonIndex + 1,\n        codeMessage: \"You got the code!\"\n      });\n      setTimeout(() => {\n        this.setState({\n          guessReceived: false,\n          stageCount: this.state.stageCount + 1\n        });\n      }, 3000);\n    } else {\n      this.playWrong();\n      this.setState({\n        guessReceived: true,\n        codeMessage: \"Sorry, that's not right. Try again.\"\n      });\n      setTimeout(() => {\n        this.setState({\n          guessReceived: false\n        });\n      }, 3000);\n    }\n  };\n\n  componentDidMount() {\n    const shuffled = shuffle(princesses);\n    this.setState({\n      shuffled,\n      randomNumber: Math.floor(Math.random() * 10) + 1\n    });\n  }\n\n  playCorrect() {\n    const audioCorrect = document.getElementsByClassName(\"audio-correct\")[0];\n    audioCorrect.play();\n  }\n\n  playWrong() {\n    const audioWrong = document.getElementsByClassName(\"audio-wrong\")[0];\n    audioWrong.play();\n  }\n\n  playPick() {\n    const audioPick = document.getElementsByClassName(\"audio-pick\")[0];\n    console.log(audioPick);\n    audioPick.play();\n  }\n\n  render() {\n    const { stageCount, codeJsonIndex } = this.state;\n    const stage = this.stageOrder[stageCount];\n    return (\n      <div>\n        <Container>\n          {stage === \"MainStart\" && (\n            <MainStart onClickMain={this.handleMainClick} />\n          )}\n          {stage === \"PlayerStart\" && (\n            <PlayerStart\n              message={codeJson[codeJsonIndex].message}\n              player={this.state.player}\n              onClick={this.handleMessageClick}\n            />\n          )}\n          {stage === \"Trivia\" && (\n            <Trivia\n              guess={this.state.guessReceived}\n              json={triviaJson[this.state.triviaJsonIndex]}\n              onClickTrivia={this.handleTriviaClick}\n              message={this.state.guessResponse}\n            />\n          )}\n          {stage === \"Princesses\" && (\n            <Match\n              onClick={this.handlePrincessesClick}\n              princesses={this.state.shuffled}\n              message={this.state.instructions}\n              card0={this.state.card0}\n              card1={this.state.card1}\n              card2={this.state.card2}\n              card3={this.state.card3}\n              card4={this.state.card4}\n              card5={this.state.card5}\n              card6={this.state.card6}\n              card7={this.state.card7}\n              group0={this.state.group0}\n              group1={this.state.group1}\n              group2={this.state.group2}\n              group3={this.state.group3}\n            />\n          )}\n          {stage === \"NBA\" && (\n            <NBA\n              onClick={this.handleNbaClick}\n              onClickClear={this.handleNbaClear}\n              onClickSubmit={this.handleNbaSubmit}\n              disabled={this.state.btnDisabled}\n              message={this.state.instructions}\n              selected={this.state.nbaSelected}\n              card0={this.state.card0}\n              card1={this.state.card1}\n              card2={this.state.card2}\n              card3={this.state.card3}\n              card4={this.state.card4}\n            />\n          )}\n          {stage === \"NumberGuess\" && (\n            <NumberGuess\n              onClick={this.handleNumberGuessClick}\n              onChange={this.handleInputChange}\n              message={this.state.instructions}\n              guesses={this.state.numberHistory}\n            />\n          )}\n          {stage === \"Rock\" && (\n            <Rock\n              onClick={this.handleRockClick}\n              message={this.state.instructions}\n              subInstructions={this.state.subInstructions}\n              wins={this.state.userWins}\n              losses={this.state.userLosses}\n              user={this.state.userRock}\n              mpj={this.state.compRock}\n            />\n          )}\n          {stage === \"SecretCode\" && (\n            <SecretCode\n              guess={this.state.guessReceived}\n              json={codeJson[this.state.codeJsonIndex]}\n              onChange={this.handleInputChange}\n              onClickCode={this.handleCodeClick}\n              message={this.state.codeMessage}\n            />\n          )}\n          {stage === \"Final\" && <Final />}\n        </Container>\n        <div>\n          <audio className=\"audio-correct\">\n            <source src=\"./audio/correct_sound.mp3\"></source>\n          </audio>\n          <audio className=\"audio-wrong\">\n            <source src=\"./audio/wrong_sound.mp3\"></source>\n          </audio>\n          <audio className=\"audio-pick\">\n            <source src=\"./audio/pick_sound.wav\"></source>\n          </audio>\n          <audio className=\"audio-final\">\n            <source src=\"../../audio/final_sound.mp3\"></source>\n          </audio>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}